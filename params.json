{"google":"","tagline":"Async JavaScript Templating","body":"# stencil\r\n\r\nstencil is a templating engine designed by Andy VanWagoner\r\n([thetalecrafter](http://github.com/thetalecrafter))\r\nto enable templates to run in an environment with asynchronous I/O,\r\nsuch as [node](http://nodejs.org), as well as in the browser.\r\n\r\nIf [ejs](https://github.com/visionmedia/ejs) suites your needs,\r\nyou should probably use that as it is better tested and is likely\r\nmore robust. However, stencil includes a few things that ejs\r\ndoes't yet.\r\n\r\n## Features\r\n\r\n  * Async tag to ensure template is processed sequentially\r\n  * Use the same template code both server and client side\r\n  * Generate function as a string on server for use on the client\r\n  * Choose to include \"use strict\"; or with(data) {...}\r\n  * Line numbers in generated code match original template\r\n\r\n\r\n## Usage - template code\r\n\r\nTemplates are specified using php/asp syntax, with code inside special tags.\r\nThere are also suffixes to the opening tag for print and async blocks.\r\nBy default the tags are php-style:\r\n\r\n```php\r\n<? javascript code here ?>\r\n<?= 'Today is ' + (new Date()) /* result is html encoded and included in output */ ?>\r\n<?= 'hello', ' ', 'world' /* multiple results can be output */ ?>\r\n<?- '<em>Important</em>' /* This output won't be encoded */ ?>\r\n\r\n<?! setTimeout(next, 1000); /* functionally equivalent to php sleep(1) */ !?>\r\n<?! someAsyncFunction(param1, function whendone(result) {\r\n\t\t// do stuff with result\r\n\t\tprint(result);\r\n\t\tnext(); // continue processing the rest of the template\r\n\t}); !?>\r\n```\r\n\r\nMembers of the data object are optionally put in the scope of the template code:\r\n\r\n```html\r\n<script type=\"text/template\" id=\"template\"><\r\n\tWhy I don't teach English anymore:\r\n\t<?= message ?>.\r\n</script>\r\n<script>\r\n\tstencil({\r\n\t\tid: 'template',\r\n\t\tsrc: document.getElementById('sub').innerHTML,\r\n\t\tstrict: false /* tells stencil to include a with(data) statement */\r\n\t}, { message:'The book is not on the table' },\r\n\t\tfunction(err, result) {\r\n\t\t\tif (err) return console.log('The template failed to run.');\r\n\t\t\tconsole.log('The template result was:' + result);\r\n\t\t}\r\n\t);\r\n</script>\r\n```\r\n\r\nWhile nested templates are not built into the language it is easy to do so\r\nwith a small amount of custom code:\r\n\r\n```javascript\r\n// client (no async done in sub)\r\n\t<?- stencil(document.getElementById('sub').innerHTML, $) ?>\r\n// server (sub can have async blocks)\r\n\t<?! fs.readFile('sub', 'utf8', function(err, tpl) {\r\n\t\tif (err) return next(err);\r\n\t\tstencil(tpl, $, next);\r\n\t}); !?>\r\n```\r\n\r\n\r\nImportant note:\r\n\r\nMake careful to put async blocks end tags at the same nesting level as the start.\r\nAll of the code inside will be wrapped into a function, and will be executed\r\nafter the main block completes.\r\n\r\n```php\r\n<?! if (works) { ?>a-okay<? } next(); !?>\r\n<?! if (!works) { !?>broken<? } next(); ?>\r\n```\r\n\r\nLooks something like this after it is compiled:\r\n\r\n```javascript\r\nasync(function(){ if (works) { print('a-okay'); } next(); });\r\nasync(function(){ if (!works) { }); print('broken'); } next();\r\n```\r\n\r\n```php\r\n<? alert('1'); print('1'); ?>\r\n<?! alert('3'); print('2'); next(); !?>\r\n<?! alert('4'); print('3'); next(); !?>\r\n<? alert('2'); print('4'); ?>\r\n// alerts 1 then 2 then 3 then 4\r\n// prints 1234\r\n```\r\n\r\n\r\n## Usage\r\n\r\n`stencil(options, data, onprint, oncomplete)` returns output if no async blocks were used\r\n\r\n`options` can be a template string or an object with these properties:\r\n* `id` - usually the filename or uri, used for caching the resulting function for subsequent runs\r\n* `src` - the template string\r\n* `start` - default '<?', start tag in the template\r\n* `stop` - default '?>', stop tag in the template\r\n* `echo` - default '-', suffix for echoing result of the expression\r\n* `safe` - default '=', suffix for echoing result of the expression html encoded\r\n* `async` - default '!', suffix for async blocks, Output is still in document order\r\n* `strict` - default true, start function with `\"use strict\";` or wrap function in `with(dataVar) {}`\r\n* `dataVar` - default '$', name of object parameter containing data mambers to use in execution\r\n* `chunkVar` - default '\\u03B9', name of function parameter called when each chunk is ready\r\n* `doneVar` - default '\\u03DD', name of function parameter called when output is complete\r\n* `outputVar` - default '\\u03A3', name of string used to hold the output\r\n* `safeVar` - default 'escape', name of function used to encode html characters\r\n* `echoVar` - default 'print', name of function used to output strings\r\n* `asyncVar` - default '\\u03BB', name of function used internally on async blocks\r\n* `nextVar` - default 'next', name of function to call when done with async block\r\n\r\n`data` object containing values to use in template execution\r\n\r\n`onprint(chunk)` - optional - function called for each chunk of output as it becomes ready\r\n\r\n`oncomplete(err, output)` function called when template has completed\r\n\r\n\r\n`stencil(options)` or `stencil.compile(options, string)` returns compiled function\r\n\r\n`options` template string or options, see above\r\n\r\n`string` - optional - if true, return compiled function as a string instead\r\n\r\n\r\n## Usage - client side\r\n\r\n```html\r\n<script src=\"stencil.js\"></script>\r\n<script type=\"text/template\" id=\"dom_id\">\r\n\t... template code here ...\r\n</script>\r\n<script>\r\n\tstencil(document.getElementById('dom_id').innerHTML,\r\n\t\t{ /*data*/ }, function(err, result) {\r\n\t\t/* all done */ \r\n\t\tif (err) { /* you broke it */ return; }\r\n\t\t/* use the result */\r\n\t});\r\n</script>\r\n```\r\n\r\n\r\n## Usage - server side\r\n\r\n```javascript\r\nvar stencil = require('./stencil');\r\n\r\nstencil('Hello <?- $.whom ?>!', { whom:'World' },\r\n\tfunction(data) { /* use the data chunks */ },\r\n\tfunction(err, result) { /* all done */ }\r\n);\r\n```\r\n\r\n\r\n## Usage - custom tags\r\n\r\n```javascript\r\n\r\n// override defaults for this template\r\nstencil({\r\n\tid:    id,\r\n\tstart: '`',\r\n\tstop:  '`',\r\n\techo:  'print',\r\n\tsafe:  'encode',\r\n\tasync: '@'\r\n}, data, function(err, result) {\r\n\t// here's my result\r\n});\r\n\r\n// or for all templates\r\nstencil.defaults.start = '`';\r\nstencil.defaults.stop  = '`';\r\n...\r\n\r\n// template code:\r\nMy pet is `if (hungry) { `hungry` } else { `sleepy` }`.\r\nHis name is: `print pet.name`.\r\n`@my_async_function(function(result) { print(result); next(); });`\r\nthe end.\r\n```\r\n\r\n\r\n## License \r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 Andy VanWagoner\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Stencil"}