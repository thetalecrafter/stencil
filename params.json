{"name":"Stencil","body":"# stencil\r\n\r\nstencil is a templating engine designed by Andy VanWagoner\r\n([thetalecrafter](http://github.com/thetalecrafter))\r\nto enable templates to run in an environment with asynchronous I/O,\r\nsuch as [node](http://nodejs.org), as well as in the browser.\r\n\r\n## Features\r\n\r\n  * Async nested templates\r\n  * Async tag to ensure template is processed sequentially\r\n  * Use the same template code both server and client side\r\n\r\n\r\n## Shared templates\r\n\r\nThe motivator for stencil was to share templates between server and client code.\r\nThe template can be used server side to generate a widget in the initial page load,\r\nand then the template can be included on the page to update the widget.\r\n\r\nThe code to generate and update a widget can be the same file.\r\n\r\n\r\n## Usage - template code\r\n\r\nTemplates are specified using php/asp syntax, with code inside special tags.\r\nBy default the tags are php-style:\r\n\r\n```php\r\n<? javascript code here ?>\r\n```\r\n\r\nThere are also suffixes to the opening tag for ouput, include, and async blocks.\r\n\r\n```php\r\n<?= 'Today is ' + (new Date()) // result included in output ?>\r\n<?= 'hello', ' ', 'world' // multiple results can be output ?>\r\n\r\n<?# 'child-template-id' // result passed as id to include() ?>\r\n<?# 'child', { custom: 'data' } // a separate data object in child ?>\r\n\r\n<?! setTimeout(output.resume, 1000); // functionally equivalent to php usleep(1000) ?>\r\n<?! someAsyncFunction(param1, function whendone(result) {\r\n\t\t// do stuff with result\r\n\t\toutput.echo(result);\r\n\t\toutput.resume(); // continue processing the rest of the template\r\n\t}); ?>\r\n```\r\n\r\nMembers of the data object passed to exec are in the scope of the template code:\r\n\r\n```html\r\n<script type=\"text/template\" id=\"template\"><[CDATA[\r\n\tWhy I don't teach English anymore:\r\n\t<?= message ?>.\r\n]]></script>\r\n<script>\r\n\t(new Template({ id:'template' })).exec({\r\n\t\tmessage: 'The book is not on the table'\r\n\t}, function(err, result) {\r\n\t\tif (err) { console.log('it didn\\'t work'); return; }\r\n\t\tdocument.body.innerHTML += result;\r\n\t});\r\n</script>\r\n```\r\n\r\n\r\nSome notes to remember:\r\n\r\n1. The code in the output and include tags must be a comma separated list of expressions.\r\n2. If only one expression is in the include tag,\r\nthe parent template's data object is passed to the child template.\r\n3. Otherwise the second expression in the include tag will be passed to the child template as data.\r\n4. Additional expressions in the include tag will be ignored.\r\n5. Unlike regular code tags, async tags cannot not include partial statements.\r\nAll of the code inside will be wrapped into a function.\r\nAll of the code following will also be wrapped into a function.\r\n\r\nThis would not work:\r\n\r\n```php\r\n<?! if (true) { ?>some output<? } ?>\r\n```\r\n\r\nSince compiled it would be similar to:\r\n\r\n```javascript\r\n(function(){ if (true) { })(function() { output.echo('some output'); } });\r\n```\r\n\r\n\r\n## Usage - client side\r\n\r\n```html\r\n<script src=\"Template.js\"></script>\r\n<script type=\"text/template\" id=\"dom_id\">\r\n\t<[CDATA[\r\n\t... template code here ...\r\n\t]]>\r\n</script>\r\n<script>\r\n\t(new Template({ id:'dom_id' }).exec({ data:object }, {\r\n\t\tonerror:function(err) { /* you broke it */ }\r\n\t\tondata:function(data) { /* use the data chunks */ }\r\n\t\tonend:function() { /* all done */ }\r\n\t});\r\n\r\n\t// or\r\n\r\n\t(new Template({ id:'dom_id' }).exec({ data:object }, function(err, result) {\r\n\t\t/* all done */ \r\n\t\tif (err) { /* you broke it */ return; }\r\n\t\t/* use the result */\r\n\t});\r\n</script>\r\n```\r\n\r\n\r\n## Usage - server side\r\n\r\n```javascript\r\nvar Template = require('./Template').Template;\r\n\r\n(new Template({ id:'/path/to/template' }).exec({ data:object }, {\r\n\tonerror:function(err) { /* you broke it */ }\r\n\tondata:function(data) { /* use the data chunks */ }\r\n\tonend:function() { /* all done */ }\r\n});\r\n\r\n// or\r\n\r\n(new Template({ id:'/path/to/template' }).exec({ data:object }, function(err, result) {\r\n\t/* all done */ \r\n\tif (err) { /* you broke it */ return; }\r\n\t/* use the result */\r\n});\r\n```\r\n\r\n\r\n## Usage - custom tags\r\n\r\n```javascript\r\n// set for all templates\r\n// Template.prototype.start = ...\r\n\r\n// set on a particular template\r\nvar t = new Template({ id:id });\r\nt.start = '`';\r\nt.stop  = '`';\r\nt.echo  = 'print';\r\nt.nest  = ' include this template:';\r\nt.async = '@';\r\n\r\n// template code:\r\nMy pet is `if (hungry) { `hungry` } else { `sleepy` }`.\r\nHis name is: `print pet.name`.\r\nHe looks like: ` include this template: 'looks_like', pet `.\r\n`@my_async_function(function(result) { output.echo(result); output.resume(); });`\r\nthe end.\r\n```\r\n\r\n\r\n## License \r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 Andy VanWagoner\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n","tagline":"Async JavaScript Templating","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}